/* parser generated by jison 0.4.18 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var mjs = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,5],$V1=[1,23],$V2=[1,40],$V3=[1,16],$V4=[1,7],$V5=[1,8],$V6=[1,9],$V7=[1,10],$V8=[1,11],$V9=[1,12],$Va=[1,13],$Vb=[1,17],$Vc=[1,36],$Vd=[1,37],$Ve=[1,38],$Vf=[1,39],$Vg=[1,41],$Vh=[1,42],$Vi=[1,43],$Vj=[1,44],$Vk=[1,45],$Vl=[1,46],$Vm=[4,7,8,9,15,18,19,22,23,27,28,29,30,59,66,67,68,73,74,75,76,77,78],$Vn=[4,7,8,9,15,16,18,19,21,22,23,27,28,29,30,59,66,67,68,73,74,75,76,77,78],$Vo=[1,51],$Vp=[1,64],$Vq=[18,26],$Vr=[11,18,26],$Vs=[11,14,18,26,40,72],$Vt=[9,11,14,18,26,39,40,42,44,46,48,50,52,54,56,58,59,61,62,63,70,71,72],$Vu=[2,72],$Vv=[1,67],$Vw=[9,11,14,18,26,33,39,40,42,44,46,48,50,52,54,56,58,59,61,62,63,67,70,71,72,79,80],$Vx=[11,14,18,26,39,40,42,44,46,48,50,52,54,56,58,59,61,62,63,72],$Vy=[1,74],$Vz=[1,72],$VA=[1,73],$VB=[11,14,18,26,39,40,72],$VC=[11,14,18,26,39,40,42,72],$VD=[11,14,18,26,39,40,42,44,72],$VE=[11,14,18,26,39,40,42,44,46,72],$VF=[11,14,18,26,39,40,42,44,46,48,72],$VG=[11,14,18,26,39,40,42,44,46,48,50,72],$VH=[11,14,18,26,39,40,42,44,46,48,50,52,54,72],$VI=[11,14,18,26,39,40,42,44,46,48,50,52,54,56,72],$VJ=[11,14,18,26,39,40,42,44,46,48,50,52,54,56,58,59,72],$VK=[14,18,26],$VL=[8,9,59,66,67,68,73,74,75,76,77,78],$VM=[1,130];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"Program":3,"EOF":4,"Elements":5,"Element":6,"function":7,"IDENTIFIER":8,"(":9,"ParameterList":10,")":11,"CompoundStatement":12,"Statement":13,",":14,"{":15,"}":16,"Statements":17,";":18,"if":19,"ConditionExpressions":20,"else":21,"while":22,"for":23,"AssignmentExpressions":24,"VariablesOrAssignmentExpressions":25,"in":26,"break":27,"continue":28,"return":29,"var":30,"Variables":31,"Variable":32,"=":33,"AssignmentExpression":34,"ConditionalExpression":35,"AssignableExpression":36,"AssignmentOperator":37,"OrExpression":38,"?":39,":":40,"AndExpression":41,"||":42,"BitwiseOrExpression":43,"&&":44,"BitwiseXorExpression":45,"|":46,"BitwiseAndExpression":47,"^":48,"EqualityExpression":49,"&":50,"RelationalExpression":51,"EQUALITY_OPERATOR":52,"ShiftExpression":53,"RELATIONAL_OPERATOR":54,"AdditiveExpression":55,"SHIFT_OPERATOR":56,"MultiplicativeExpression":57,"+":58,"-":59,"UnaryExpression":60,"*":61,"/":62,"%":63,"PrimaryExpression":64,"ReferenceableExpression":65,"!":66,"INCREMENT_OPERATOR":67,"delete":68,"ArgumentList":69,".":70,"[":71,"]":72,"NUMBER":73,"STRING":74,"false":75,"true":76,"null":77,"this":78,"-=":79,"+=":80,"$accept":0,"$end":1},
terminals_: {2:"error",4:"EOF",7:"function",8:"IDENTIFIER",9:"(",11:")",14:",",15:"{",16:"}",18:";",19:"if",21:"else",22:"while",23:"for",26:"in",27:"break",28:"continue",29:"return",30:"var",33:"=",39:"?",40:":",42:"||",44:"&&",46:"|",48:"^",50:"&",52:"EQUALITY_OPERATOR",54:"RELATIONAL_OPERATOR",56:"SHIFT_OPERATOR",58:"+",59:"-",61:"*",62:"/",63:"%",66:"!",67:"INCREMENT_OPERATOR",68:"delete",70:".",71:"[",72:"]",73:"NUMBER",74:"STRING",75:"false",76:"true",77:"null",78:"this",79:"-=",80:"+="},
productions_: [0,[3,1],[3,2],[5,1],[5,2],[6,6],[6,5],[6,1],[10,1],[10,3],[12,2],[12,3],[17,1],[17,2],[13,1],[13,3],[13,5],[13,3],[13,8],[13,7],[13,9],[13,8],[13,7],[13,2],[13,2],[13,2],[13,3],[13,1],[13,2],[20,3],[25,2],[25,1],[31,1],[31,3],[32,1],[32,3],[24,1],[24,3],[34,1],[34,3],[35,1],[35,5],[38,1],[38,3],[41,1],[41,3],[43,1],[43,3],[45,1],[45,3],[47,1],[47,3],[49,1],[49,3],[51,1],[51,3],[53,1],[53,3],[55,1],[55,3],[55,3],[57,1],[57,3],[57,3],[57,3],[60,1],[60,1],[60,2],[60,2],[60,2],[60,2],[60,2],[65,1],[65,3],[65,4],[36,1],[36,3],[36,4],[69,1],[69,3],[64,3],[64,1],[64,1],[64,1],[64,1],[64,1],[64,1],[37,1],[37,1],[37,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:
 return {elements: []} 
break;
case 2:
 return {elements: $$[$0-1]} 
break;
case 3: case 8: case 12: case 32: case 36: case 78:
 this.$ = [$$[$0]] 
break;
case 4:
 this.$ = [...$$[$0-1], $$[$0]] 
break;
case 5:
 this.$ = {type: 'function', id: $$[$0-4], parameters: $$[$0-2], ...$$[$0]} 
break;
case 6:
 this.$ = {type: 'function', id: $$[$0-3], parameters: [], ...$$[$0]} 
break;
case 7: case 27: case 38: case 40: case 42: case 44: case 46: case 48: case 50: case 52: case 54: case 56: case 58: case 61: case 65: case 72:
 this.$ = $$[$0] 
break;
case 9: case 33: case 37: case 79:
 this.$ = [$$[$0-2], ...$$[$0]] 
break;
case 10:
 this.$ = {statements: []} 
break;
case 11:
 this.$ = {statements: $$[$0-1]} 
break;
case 13:
 this.$ = [$$[$0-1], ...$$[$0]] 
break;
case 14: case 85:
 this.$ = null 
break;
case 15:
 this.$ = {type: 'ifelse', conditionExpressions: $$[$0-1], trueStatement: $$[$0]} 
break;
case 16:
 this.$ = {type: 'ifelse', conditionExpressions: $$[$0-3], trueStatement: $$[$0-2], falseStatement: $$[$0]} 
break;
case 17:
 this.$ = {type: 'while', conditionExpressions: $$[$0-1], statement: $$[$0]} 
break;
case 18:
 this.$ = {type: 'for', conditionExpressions: $$[$0-4], incrementExpressions: $$[$0-2], statement: $$[$0]} 
break;
case 19:
 this.$ = {type: 'for', conditionExpressions: $$[$0-3], statement: $$[$0]} 
break;
case 20:
 this.$ = {type: 'for', variablesOrExpressions: $$[$0-6], conditionExpressions: $$[$0-4], incrementExpressions: $$[$0-2], statement: $$[$0]} 
break;
case 21:
 this.$ = {type: 'for', variablesOrExpressions: $$[$0-5], conditionExpressions: $$[$0-3], statement: $$[$0]} 
break;
case 22:
 this.$ = {type: 'forin', variablesOrExpressions: $$[$0-4], iterableExpressions: $$[$0-2], statement: $$[$0]} 
break;
case 23:
 this.$ = {type: 'break'} 
break;
case 24:
 this.$ = {type: 'continue'} 
break;
case 25:
 this.$ = {type: 'return'} 
break;
case 26:
 this.$ = {type: 'return', expressions: $$[$0-1]} 
break;
case 28: case 29: case 80:
 this.$ = $$[$0-1] 
break;
case 30:
 this.$ = {variables: $$[$0]} 
break;
case 31:
 this.$ = {expressions: $$[$0]} 
break;
case 34:
 this.$ = {type: 'scopedAssignment', id: $$[$0]} 
break;
case 35:
 this.$ = {type: 'scopedAssignment', id: $$[$0-2], valueExpression: $$[$0]} 
break;
case 39:
 this.$ = {type: 'assignment', targetExpression: $$[$0-2], assignmentOperator: $$[$0-1], valueExpression: $$[$0]} 
break;
case 41:
 this.$ = {type: 'ifelse', conditionExpression: $$[$0-4], trueStatment: $$[$0-2], falseStatement: $$[$0]} 
break;
case 43: case 45: case 47: case 49: case 51: case 53: case 55: case 57: case 59: case 60: case 62: case 63: case 64:
 this.$ = {type: 'binary', leftExpression: $$[$0-2], operator: $$[$0-1], rightExpression: $$[$0]} 
break;
case 66:
 this.$ = {type: 'evaluate', targetExpression: $$[$0]} 
break;
case 67: case 68:
 this.$ = {type: 'unary', expression: $$[$0], operator: $$[$0-1]} 
break;
case 69:
 this.$ = {type: 'incrementBefore', targetExpression: $$[$0], operator: $$[$0-1]} 
break;
case 70:
 this.$ = {type: 'incrementAfter', targetExpression: $$[$0-1], operator: $$[$0]} 
break;
case 71:
 this.$ = {type: 'delete', targetExpression: $$[$0]} 
break;
case 73:
 this.$ = {type: 'call', targetExpression: $$[$0-2], arguments: []} 
break;
case 74:
 this.$ = {type: 'call', targetExpression: $$[$0-3], arguments: $$[$0-1]} 
break;
case 75:
 this.$ = {type: 'readVariable', id: $$[$0]} 
break;
case 76:
 this.$ = {type: 'readMember', targetExpression: $$[$0-2], id: $$[$0]} 
break;
case 77:
 this.$ = {type: 'readKey', targetExpression: $$[$0-3], keyExpression: $$[$0-1]} 
break;
case 81:
 this.$ = Number($$[$0]) 
break;
case 82:
 this.$ = $$[$0].substring(1, $$[$0].length - 1) 
break;
case 83:
 this.$ = false 
break;
case 84:
 this.$ = true 
break;
case 86:
 this.$ = {id: $$[$0]} 
break;
}
},
table: [{3:1,4:[1,2],5:3,6:4,7:$V0,8:$V1,9:$V2,12:14,13:6,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{1:[3]},{1:[2,1]},{4:[1,47],6:48,7:$V0,8:$V1,9:$V2,12:14,13:6,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vm,[2,3]),{8:[1,49]},o($Vm,[2,7]),o($Vn,[2,14]),{9:$Vo,20:50},{9:$Vo,20:52},{9:[1,53]},{18:[1,54]},{18:[1,55]},{8:$V1,9:$V2,18:[1,56],24:57,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vn,[2,27]),{18:[1,58]},{8:$V1,9:$V2,12:14,13:61,15:$V3,16:[1,59],17:60,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$Vp,31:62,32:63},o($Vq,[2,31]),o($Vr,[2,36],{14:[1,65]}),o($Vs,[2,38]),o($Vt,$Vu,{37:66,33:[1,68],67:$Vv,79:[1,69],80:[1,70]}),o($Vs,[2,40],{39:[1,71]}),o($Vw,[2,75]),o($Vx,[2,66],{9:$Vy,70:$Vz,71:$VA}),o($VB,[2,42],{42:[1,75]}),o($VC,[2,44],{44:[1,76]}),o($VD,[2,46],{46:[1,77]}),o($VE,[2,48],{48:[1,78]}),o($VF,[2,50],{50:[1,79]}),o($VG,[2,52],{52:[1,80],54:[1,81]}),o($VH,[2,54]),o($VH,[2,56],{56:[1,82]}),o($VI,[2,58],{58:[1,83],59:[1,84]}),o($VJ,[2,61],{61:[1,85],62:[1,86],63:[1,87]}),o($Vx,[2,65]),{8:$V1,9:$V2,36:89,59:$Vc,60:88,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,59:$Vc,60:90,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,36:91,65:92},{8:$V1,36:93,65:92},{8:$V1,9:$V2,24:94,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vx,[2,81]),o($Vx,[2,82]),o($Vx,[2,83]),o($Vx,[2,84]),o($Vx,[2,85]),o($Vx,[2,86]),{1:[2,2]},o($Vm,[2,4]),{9:[1,95]},{8:$V1,9:$V2,12:14,13:96,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,24:97,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,12:14,13:98,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,18:[1,99],24:18,25:100,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vn,[2,23]),o($Vn,[2,24]),o($Vn,[2,25]),{18:[1,101]},o($Vn,[2,28]),o($Vn,[2,10]),{16:[1,102]},{8:$V1,9:$V2,12:14,13:61,15:$V3,16:[2,12],17:103,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vq,[2,30]),o($Vq,[2,32],{14:[1,104]}),o($VK,[2,34],{33:[1,105]}),{8:$V1,9:$V2,24:106,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,34:107,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vx,[2,70]),o($VL,[2,87]),o($VL,[2,88]),o($VL,[2,89]),{8:$V1,9:$V2,34:108,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:[1,109]},{8:$V1,9:$V2,34:110,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,11:[1,111],34:113,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,69:112,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,38:114,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,41:115,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,43:116,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,45:117,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,47:118,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,49:119,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,53:120,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,53:121,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,55:122,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,55:123,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,57:124,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,57:125,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,36:89,57:126,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vx,[2,67]),o($Vt,$Vu,{67:$Vv}),o($Vx,[2,68]),o($Vx,[2,69],{9:$Vu,70:$Vu,71:$Vu}),{9:$Vy,70:$Vz,71:$VA},o($Vx,[2,71],{9:$Vu,70:$Vu,71:$Vu}),{11:[1,127]},{8:$VM,10:128,11:[1,129]},o([4,7,8,9,15,16,18,19,22,23,27,28,29,30,59,66,67,68,73,74,75,76,77,78],[2,15],{21:[1,131]}),{11:[1,132]},o($Vn,[2,17]),{8:$V1,9:$V2,24:133,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{18:[1,134],26:[1,135]},o($Vn,[2,26]),o($Vn,[2,11]),{16:[2,13]},{8:$Vp,31:136,32:63},{8:$V1,9:$V2,34:137,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vr,[2,37]),o($Vs,[2,39]),{40:[1,138]},o($Vw,[2,76]),{72:[1,139]},o($Vt,[2,73]),{11:[1,140]},{11:[2,78],14:[1,141]},o($VB,[2,43]),o($VC,[2,45]),o($VD,[2,47]),o($VE,[2,49]),o($VF,[2,51]),o($VG,[2,53]),o($VH,[2,55]),o($VH,[2,57]),o($VI,[2,59]),o($VI,[2,60]),o($VJ,[2,62]),o($VJ,[2,63]),o($VJ,[2,64]),o($Vx,[2,80]),{11:[1,142]},{12:143,15:$V3},{11:[2,8],14:[1,144]},{8:$V1,9:$V2,12:14,13:145,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o([8,9,15,18,19,22,23,27,28,29,30,59,66,67,68,73,74,75,76,77,78],[2,29]),{18:[1,146]},{8:$V1,9:$V2,24:147,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,24:148,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vq,[2,33]),o($VK,[2,35]),{8:$V1,9:$V2,34:149,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vw,[2,77]),o($Vt,[2,74]),{8:$V1,9:$V2,34:113,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,69:150,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{12:151,15:$V3},o($Vm,[2,6]),{8:$VM,10:152},o($Vn,[2,16]),{8:$V1,9:$V2,11:[1,154],24:153,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{18:[1,155]},{11:[1,156]},o($Vs,[2,41]),{11:[2,79]},o($Vm,[2,5]),{11:[2,9]},{11:[1,157]},{8:$V1,9:$V2,12:14,13:158,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,11:[1,160],24:159,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,12:14,13:161,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},{8:$V1,9:$V2,12:14,13:162,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vn,[2,19]),{11:[1,163]},{8:$V1,9:$V2,12:14,13:164,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vn,[2,22]),o($Vn,[2,18]),{8:$V1,9:$V2,12:14,13:165,15:$V3,18:$V4,19:$V5,22:$V6,23:$V7,24:18,25:15,27:$V8,28:$V9,29:$Va,30:$Vb,34:19,35:20,36:21,38:22,41:25,43:26,45:27,47:28,49:29,51:30,53:31,55:32,57:33,59:$Vc,60:34,64:35,65:24,66:$Vd,67:$Ve,68:$Vf,73:$Vg,74:$Vh,75:$Vi,76:$Vj,77:$Vk,78:$Vl},o($Vn,[2,21]),o($Vn,[2,20])],
defaultActions: {2:[2,1],47:[2,2],103:[2,13],150:[2,79],152:[2,9]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        var error = new Error(str);
        error.hash = hash;
        throw error;
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/* skip whitespace */
break;
case 1:/* skip single line of comments */
break;
case 2:/* skip multiline comments */
break;
case 3:return 7
break;
case 4:return 23
break;
case 5:return 19
break;
case 6:return 22
break;
case 7:return 30
break;
case 8:return 75
break;
case 9:return 76
break;
case 10:return 77
break;
case 11:return 78
break;
case 12:return 'new'
break;
case 13:return 68
break;
case 14:return 28
break;
case 15:return 27
break;
case 16:return 29
break;
case 17:return 73
break;
case 18:return 74
break;
case 19:return 74
break;
case 20:return 8
break;
case 21:return 42
break;
case 22:return 44
break;
case 23:return 56
break;
case 24:return 56
break;
case 25:return 67
break;
case 26:return 67
break;
case 27:return 33
break;
case 28:return 80
break;
case 29:return 79
break;
case 30:return 54
break;
case 31:return 54
break;
case 32:return 54
break;
case 33:return 54
break;
case 34:return 52
break;
case 35:return 52
break;
case 36:return 52
break;
case 37:return 52
break;
case 38:return 61
break;
case 39:return 62
break;
case 40:return 59
break;
case 41:return 58
break;
case 42:return 48
break;
case 43:return 66
break;
case 44:return 63
break;
case 45:return 70
break;
case 46:return 9
break;
case 47:return 11
break;
case 48:return 71
break;
case 49:return 72
break;
case 50:return 15
break;
case 51:return 16
break;
case 52:return 14
break;
case 53:return 39
break;
case 54:return 40
break;
case 55:return 'PI'
break;
case 56:return 'E'
break;
case 57:return 18
break;
case 58:return 4
break;
case 59:return 'INVALID'
break;
}
},
rules: [/^(?:\s+)/,/^(?:(?=\/)[^\n]*)/,/^(?:(?=\*)(([^*]\/)|[^\/])*\*\/)/,/^(?:function\b)/,/^(?:for\b)/,/^(?:if\b)/,/^(?:while\b)/,/^(?:var\b)/,/^(?:false\b)/,/^(?:true\b)/,/^(?:null\b)/,/^(?:this\b)/,/^(?:new\b)/,/^(?:delete\b)/,/^(?:continue\b)/,/^(?:break\b)/,/^(?:return\b)/,/^(?:[0-9]+(\.[0-9]+)?\b)/,/^(?:"(\\.|[^\\"])*")/,/^(?:'(\\.|[^\\'])*')/,/^(?:\w[\w\d_]*)/,/^(?:\|\|)/,/^(?:&&)/,/^(?:<<)/,/^(?:>>)/,/^(?:\+\+)/,/^(?:--)/,/^(?:=)/,/^(?:\+=)/,/^(?:-=)/,/^(?:<)/,/^(?:>)/,/^(?:<=)/,/^(?:>=)/,/^(?:==)/,/^(?:===)/,/^(?:!=)/,/^(?:!==)/,/^(?:\*)/,/^(?:\/)/,/^(?:-)/,/^(?:\+)/,/^(?:\^)/,/^(?:!)/,/^(?:%)/,/^(?:\.)/,/^(?:\()/,/^(?:\))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:,)/,/^(?:\?)/,/^(?::)/,/^(?:PI\b)/,/^(?:E\b)/,/^(?:;)/,/^(?:$)/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26,27,28,29,30,31,32,33,34,35,36,37,38,39,40,41,42,43,44,45,46,47,48,49,50,51,52,53,54,55,56,57,58,59],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = mjs;
exports.Parser = mjs.Parser;
exports.parse = function () { return mjs.parse.apply(mjs, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}